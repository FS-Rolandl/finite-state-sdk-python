#!/usr/bin/env python3

import argparse
import csv
import json
from datetime import datetime
from dotenv import load_dotenv
import os
import sys
from collections import defaultdict

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import finite_state_sdk

def parse_args():
    parser = argparse.ArgumentParser(description='Report on vulnerability severity trends over time.')
    parser.add_argument('--secrets-file', required=True, help='Path to the secrets file')
    parser.add_argument('--csv', nargs='?', const='severity_trends.csv', help='Export the report to a CSV file (default: severity_trends.csv)')
    parser.add_argument('--debug', action='store_true', help='Print debug information about the API response')
    return parser.parse_args()

def get_severity_score(severity):
    """Convert severity string to numeric score for comparison."""
    severity_map = {
        'CRITICAL': 4,
        'HIGH': 3,
        'MEDIUM': 2,
        'LOW': 1,
        'INFO': 0
    }
    return severity_map.get(severity.upper(), 0)

def print_progress(current, total, prefix=''):
    """Print a progress bar."""
    bar_length = 50
    filled_length = int(round(bar_length * current / float(total)))
    percents = round(100.0 * current / float(total), 1)
    bar = '=' * filled_length + '-' * (bar_length - filled_length)
    sys.stdout.write(f'\r{prefix}[{bar}] {percents}% ({current}/{total})')
    sys.stdout.flush()
    if current == total:
        sys.stdout.write('\n')

def main():
    args = parse_args()
    load_dotenv(args.secrets_file)
    token = finite_state_sdk.get_auth_token(
        os.getenv('CLIENT_ID'),
        os.getenv('CLIENT_SECRET')
    )
    org_ctx = os.getenv('ORGANIZATION_CONTEXT')

    # Get all asset versions
    print("\nFetching asset versions...")
    asset_versions = finite_state_sdk.get_all_asset_versions(token, org_ctx)
    total_versions = len(asset_versions)
    print(f"Found {total_versions} asset versions to analyze")
    
    # Prepare data structures for analysis
    asset_data = defaultdict(lambda: defaultdict(lambda: {
        'total_vulns': 0,
        'high_severity_vulns': 0,
        'created_at': None
    }))
    
    print("\nAnalyzing vulnerability severity trends...")
    for i, asset_version in enumerate(asset_versions, 1):
        asset = asset_version.get('asset', {})
        asset_name = asset.get('name', 'N/A')
        group_name = asset.get('group', {}).get('name', 'N/A')
        version_name = asset_version.get('name', 'N/A')
        created_at = asset_version.get('createdAt')
        
        # Print progress
        print_progress(i, total_versions, f'Processing {asset_name} {version_name}: ')
        
        # Get findings for this asset version
        findings = finite_state_sdk.get_findings(
            token,
            org_ctx,
            asset_version_id=asset_version.get('id')
        )
        
        if not isinstance(findings, list):
            continue
            
        # Count vulnerabilities by severity
        total_vulns = len(findings)
        high_severity_vulns = sum(1 for f in findings if get_severity_score(f.get('severity', '')) >= 3)
        
        # Store the data
        asset_data[asset_name][version_name].update({
            'total_vulns': total_vulns,
            'high_severity_vulns': high_severity_vulns,
            'created_at': created_at,
            'group': group_name
        })
    
    # Prepare data for CSV export
    csv_data = []
    
    print("\nVulnerability Severity Trends:")
    print("-" * 120)
    print(f"{'Asset Name':<30} {'Group':<10} {'Version':<20} {'Created At':<20} {'Total Vulns':<12} {'High Severity':<12} {'High %':<8}")
    print("-" * 120)
    
    for asset_name, versions in asset_data.items():
        for version_name, data in versions.items():
            total_vulns = data['total_vulns']
            high_severity_vulns = data['high_severity_vulns']
            high_percentage = (high_severity_vulns / total_vulns * 100) if total_vulns > 0 else 0
            created_at = data['created_at']
            group = data['group']
            
            # Format the date
            if created_at:
                try:
                    date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = date.strftime('%Y-%m-%d')
                except:
                    formatted_date = created_at
            else:
                formatted_date = 'N/A'
            
            # Print to console
            print(f"{asset_name:<30} {group:<10} {version_name:<20} {formatted_date:<20} {total_vulns:<12} {high_severity_vulns:<12} {high_percentage:>6.1f}%")
            
            # Store for CSV
            csv_data.append({
                'Asset Name': asset_name,
                'Group': group,
                'Version': version_name,
                'Created At': formatted_date,
                'Total Vulnerabilities': total_vulns,
                'High Severity Vulnerabilities': high_severity_vulns,
                'High Severity Percentage': f"{high_percentage:.1f}%"
            })
    
    print("-" * 120)
    
    # Export to CSV if requested
    if args.csv:
        with open(args.csv, 'w', newline='') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=[
                'Asset Name', 'Group', 'Version', 'Created At',
                'Total Vulnerabilities', 'High Severity Vulnerabilities',
                'High Severity Percentage'
            ])
            writer.writeheader()
            writer.writerows(csv_data)
        print(f"\nReport exported to {args.csv}")

if __name__ == '__main__':
    main() 